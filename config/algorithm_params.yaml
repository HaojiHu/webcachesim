LRU:
  bloom_filter:
    - 0
    - 1
LRUK:
  k:
    #    - 1
    #    - 2
    #    - 3
    - 4
# Bad but equivalent implementation of Bloom Filter
Filter:
  n: 1
LRUKSample:
  sample_rate: 32
PercentRelaxedBelady:
  p:
    - 0.01
    - 0.02
    - 0.03
    - 0.04
    - 0.05
    - 0.1
    - 0.15
    - 0.2
    - 0.25
    - 0.3
    - 0.4
    - 0.5
    - 0.6
    - 0.7
    - 0.8
    - 0.9
  sample_rate: 128
  memorize_sample:
    - 0
    - 1
BeladySample:
  sample_rate:
    - 64
  #    - 128
  #    - 256
  #    - 512
  #    - 1024
  threshold:
    - 40000000
  memorize_sample:
    - 0
#    - 1
ThLRU:
  t: 1073741824
ThS4LRU:
  t: 1073741824
LRBelady:
  sample_rate:
    - 32
  threshold: 10000000
  gradient_window:
    - 100000
  learning_rate:
    - 0.00001
  n_past_intervals: 4
  out_sample:
    #    - 0
    - 1
  bias_point:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  alpha:
    - 0.1
    - 0.2
    - 0.5
    - 1
    - 2
    - 5
  version:
    seven
BeladyStatic:
  zero_cost:
    - 0
    - 1
  static_window:
    - 200000
    - 500000
    - 1000000
    - 2000000
    - 5000000
    - 10000000
    - 20000000
  version:
    assert
Bins:
  sample_rate:
    - 32
  threshold: 10000000
  n_past_intervals: 4
  w0:
    - 0.1
  w1:
    - 0.1
  w2:
    - 0.1
  w3:
    - 0.2
  w4:
    - 0.2
  w5:
    - 0.1
    - 0
  w6:
    - 0.1
    - 0
  w7:
    - 0.1
    - 0
  w8:
    - 0.1
    - 0
  w9:
    - 0.1
    - 0
WLC:
  sample_rate: 64
  memory_window: 10000000
  batch_size: 131072
  max_n_past_timestamps: 32
  num_iterations: 32
  num_leaves: 32
  num_threads: 4
  learning_rate: 0.1
  objective: byte_miss_ratio
  n_edc_feature: 10
  range_log: 1000000
  version: opensource
ParallelWLC:
  training_sample_interval: 64
  sample_rate: 64
  batch_size: 131072
  max_n_past_timestamps: 32
  num_iterations: 32
  num_leaves: 32
  num_threads: 4
  learning_rate: 0.1
  objective: byte_miss_ratio
  n_edc_feature: 10
  version: opensource
Hyperbolic:
  sample_rate: 64
LeCaR:
  learning_rate: 0.45

